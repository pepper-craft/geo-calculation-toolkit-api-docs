openapi: 3.0.3
info:
  title: Geo Calculation Toolkit API
  description: |
    This is an HTTP API that calculates the distance between two geographic coordinates.
  version: 1.0.0
servers:
  - url: https://geo-calculation-toolkit-api.p.rapidapi.com
paths:
  /distance/between-coordinates:
    post:
      externalDocs:
        url: https://github.com/pepper-craft/geo-calculation-toolkit-api-docs/blob/main/detail/distance-between-two-coordinates.md
      summary: Distance between two coordinates
      description: |
        This is an HTTP API that calculates the distance between two geographic coordinates.
      tags: [ Distance Calculation ]
      parameters:
        - name: unit
          in: query
          required: false
          schema:
            type: string
            enum: [ mm, cm, m, km, in, ft, yd, mi ]
            example: m
          description: |
            Unit for the response value (`mm`, `cm`, `m`, `km`, `in`, `ft`, `yd`, `mi`) (default: `m`).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ coordinate1, coordinate2 ]
              properties:
                coordinate1:
                  type: object
                  required: [ lat, lng ]
                  properties:
                    lat:
                      type: number
                      description: Latitude of the first coordinate
                    lng:
                      type: number
                      description: Longitude of the first coordinate
                coordinate2:
                  type: object
                  required: [ lat, lng ]
                  properties:
                    lat:
                      type: number
                      description: Latitude of the second coordinate
                    lng:
                      type: number
                      description: Longitude of the second coordinate
            example:
              coordinate1:
                lat: 37.618515
                lng: 126.920021
              coordinate2:
                lat: 37.618385
                lng: 126.920339
      responses:
        '200':
          description: Successful responses
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      distance:
                        type: number
                        example: 31.4989
                        description: Distance between coordinates
                      unit:
                        type: string
                        example: m
                        description: Unit for the response value (`mm`, `cm`, `m`, `km`, `in`, `ft`, `yd`, `mi`)
  /distance/from-point-to-line/shortest:
    post:
      externalDocs:
        url: https://github.com/pepper-craft/geo-calculation-toolkit-api-docs/blob/main/detail/shortest-distance-from-a-coordinate-to-a-line.md
      summary: Shortest distance from a coordinate to a line
      description: |
        This is an HTTP API that calculates the shortest distance from a coordinate to a line segment, considering only the finite bounds of the segment.
      tags: [ Distance Calculation ]
      parameters:
        - name: unit
          in: query
          required: false
          schema:
            type: string
            enum: [ mm, cm, m, km, in, ft, yd, mi ]
            example: m
          description: |
            Unit for the response value (`mm`, `cm`, `m`, `km`, `in`, `ft`, `yd`, `mi`) (default: `m`).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ coordinate, line ]
              properties:
                coordinate:
                  type: object
                  required: [ lat, lng ]
                  properties:
                    lat:
                      type: number
                      description: Latitude of the input coordinate
                    lng:
                      type: number
                      description: Longitude of the input coordinate
                line:
                  type: array
                  minItems: 2
                  maxItems: 2
                  items:
                    type: object
                    required: [ lat, lng ]
                    properties:
                      lat:
                        type: number
                        description: Latitude of a point on the line
                      lng:
                        type: number
                        description: Longitude of a point on the line
            example:
              coordinate:
                lat: 37.618500
                lng: 126.920300
              line:
                - lat: 37.618515
                  lng: 126.920021
                - lat: 37.618385
                  lng: 126.920339
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      distance:
                        type: number
                        example: 9.7817
                        description: Shortest surface distance from the input coordinate to the line
                      unit:
                        type: string
                        example: m
                        description: Unit for the response value (`mm`, `cm`, `m`, `km`, `in`, `ft`, `yd`, `mi`)
  /distance/from-point-to-line/perpendicular:
    post:
      externalDocs:
        url: https://github.com/pepper-craft/geo-calculation-toolkit-api-docs/blob/main/detail/perpendicular-distance-from-a-coordinate-to-a-line.md
      summary: Perpendicular distance from a coordinate to a line
      description: |
        This is an HTTP API that calculates the perpendicular distance from a coordinate to a specified line segment.
      tags: [ Distance Calculation ]
      parameters:
        - name: unit
          in: query
          required: false
          schema:
            type: string
            enum: [ mm, cm, m, km, in, ft, yd, mi ]
            example: m
          description: |
            Unit for the response value (`mm`, `cm`, `m`, `km`, `in`, `ft`, `yd`, `mi`) (default: `m`).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ coordinate, line ]
              properties:
                coordinate:
                  type: object
                  required: [ lat, lng ]
                  properties:
                    lat:
                      type: number
                      description: Latitude of the input coordinate
                    lng:
                      type: number
                      description: Longitude of the input coordinate
                line:
                  type: array
                  minItems: 2
                  maxItems: 2
                  items:
                    type: object
                    required: [ lat, lng ]
                    properties:
                      lat:
                        type: number
                        description: Latitude of a point on the line
                      lng:
                        type: number
                        description: Longitude of a point on the line
            example:
              coordinate:
                lat: 37.618500
                lng: 126.920300
              line:
                - lat: 37.618515
                  lng: 126.920021
                - lat: 37.618385
                  lng: 126.920339
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      distance:
                        type: number
                        example: 9.7817
                        description: Shortest perpendicular surface distance from the input coordinate to the line
                      unit:
                        type: string
                        example: m
                        description: Unit for the response value (`mm`, `cm`, `m`, `km`, `in`, `ft`, `yd`, `mi`)
  /length/polyline:
    post:
      externalDocs:
        url: https://github.com/pepper-craft/geo-calculation-toolkit-api-docs/blob/main/detail/total-length-of-a-polyline.md
      summary: Total length of a polyline
      description: |
        This is an HTTP API that calculates the total geographic length of a given polyline.
      tags: [ Length Calculation ]
      parameters:
        - name: unit
          in: query
          required: false
          schema:
            type: string
            enum: [ mm, cm, m, km, in, ft, yd, mi ]
            example: m
          description: |
            Unit for the response value (`mm`, `cm`, `m`, `km`, `in`, `ft`, `yd`, `mi`) (default: `m`).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ polyline ]
              properties:
                polyline:
                  type: array
                  minItems: 2
                  items:
                    type: object
                    required: [ lat, lng ]
                    properties:
                      lat:
                        type: number
                        description: Latitude of a point in the polyline
                      lng:
                        type: number
                        description: Longitude of a point in the polyline
                  example:
                    - lat: 37.618492
                      lng: 126.920078
                    - lat: 37.618385
                      lng: 126.920339
                    - lat: 37.618210
                      lng: 126.920580
                    - lat: 37.618050
                      lng: 126.920830
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      length:
                        type: number
                        example: 82.9372
                        description: Total length of the polyline
                      unit:
                        type: string
                        example: m
                        description: Unit for the response value (`mm`, `cm`, `m`, `km`, `in`, `ft`, `yd`, `mi`)
  /length/polygon/boundary:
    post:
      externalDocs:
        url: https://github.com/pepper-craft/geo-calculation-toolkit-api-docs/blob/main/detail/total-boundary-length-of-the-polygonal-area.md
      summary: Total boundary length of the polygonal area
      description: |
        This is an HTTP API that calculates the total boundary length of a given polygonal area.
      tags: [ Length Calculation ]
      parameters:
        - name: unit
          in: query
          required: false
          schema:
            type: string
            enum: [ mm, cm, m, km, in, ft, yd, mi ]
            example: m
          description: |
            Unit for the response value (`mm`, `cm`, `m`, `km`, `in`, `ft`, `yd`, `mi`) (default: `m`).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ polygon ]
              properties:
                polygon:
                  type: array
                  minItems: 3
                  items:
                    type: object
                    required: [ lat, lng ]
                    properties:
                      lat:
                        type: number
                        description: Latitude of a vertex
                      lng:
                        type: number
                        description: Longitude of a vertex
                  example:
                    - lat: 37.618515
                      lng: 126.920021
                    - lat: 37.618492
                      lng: 126.920078
                    - lat: 37.618428
                      lng: 126.920135
                    - lat: 37.618385
                      lng: 126.920339
                    - lat: 37.618515
                      lng: 126.920021
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      length:
                        type: number
                        example: 64.4145
                        description: Total boundary length of the polygon
                      unit:
                        type: string
                        example: m
                        description: Unit for the response value (`mm`, `cm`, `m`, `km`, `in`, `ft`, `yd`, `mi`)
  /length/circle/boundary:
    post:
      externalDocs:
        url: https://github.com/pepper-craft/geo-calculation-toolkit-api-docs/blob/main/detail/total-boundary-length-of-the-circular-area.md
      summary: Total boundary length of the circular area
      description: |
        This is an HTTP API that calculates the total boundary length (circumference) of a given circular area.
      tags: [ Length Calculation ]
      parameters:
        - name: unit
          in: query
          required: false
          schema:
            type: string
            enum: [ mm, cm, m, km, in, ft, yd, mi ]
            example: m
          description: |
            Unit for the response value (`mm`, `cm`, `m`, `km`, `in`, `ft`, `yd`, `mi`) (default: `m`).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ circle ]
              properties:
                circle:
                  type: object
                  required: [ centerCoordinate, radius ]
                  properties:
                    centerCoordinate:
                      type: object
                      required: [ lat, lng ]
                      properties:
                        lat:
                          type: number
                          description: Latitude of the center
                        lng:
                          type: number
                          description: Longitude of the center
                    radius:
                      type: number
                      description: Radius of the circle
                    radiusUnit:
                      type: string
                      description: |
                        Unit of radius (`mm`, `cm`, `m`, `km`, `in`, `ft`, `yd`, `mi`) (default: `m`)
                  example:
                    centerCoordinate:
                      lat: 37.618492
                      lng: 126.920078
                    radius: 200
                    radiusUnit: m
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      length:
                        type: number
                        example: 1256.6371
                        description: Total boundary length (circumference)
                      unit:
                        type: string
                        example: m
                        description: Unit for the response value (`mm`, `cm`, `m`, `km`, `in`, `ft`, `yd`, `mi`)
  /coordinate/closest-on-line:
    post:
      externalDocs:
        url: https://github.com/pepper-craft/geo-calculation-toolkit-api-docs/blob/main/detail/closest-point-on-a-line-from-a-coordinate.md
      summary: Closest point on a line from a coordinate
      description: |
        This is an HTTP API that finds the closest point on a given line segment from an input coordinate.
      tags: [ Coordinates Calculation ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ coordinate, line ]
              properties:
                coordinate:
                  type: object
                  required: [ lat, lng ]
                  properties:
                    lat:
                      type: number
                      description: Latitude of the input coordinate
                    lng:
                      type: number
                      description: Longitude of the input coordinate
                line:
                  type: array
                  minItems: 2
                  maxItems: 2
                  items:
                    type: object
                    required: [ lat, lng ]
                    properties:
                      lat:
                        type: number
                        description: Latitude of an endpoint of the line segment
                      lng:
                        type: number
                        description: Longitude of an endpoint of the line segment
              example:
                coordinate:
                  lat: 37.618492
                  lng: 126.920078
                line:
                  - lat: 37.618515
                    lng: 126.920021
                  - lat: 37.618385
                    lng: 126.920339
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      coordinate:
                        type: object
                        properties:
                          lat:
                            type: number
                            example: 37.6184918
                            description: Latitude of the closest point on the line segment
                          lng:
                            type: number
                            example: 126.9200778
                            description: Longitude of the closest point on the line segment
  /coordinate/perpendicular-foot:
    post:
      externalDocs:
        url: https://github.com/pepper-craft/geo-calculation-toolkit-api-docs/blob/main/detail/perpendicular-foot-of-a-coordinate-on-a-line.md
      summary: Perpendicular foot of a coordinate on a line
      description: |
        This is an HTTP API that calculates the perpendicular foot of a coordinate on a given line segment.
      tags: [ Coordinates Calculation ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ coordinate, line ]
              properties:
                coordinate:
                  type: object
                  required: [ lat, lng ]
                  properties:
                    lat:
                      type: number
                      description: Latitude of the input coordinate
                    lng:
                      type: number
                      description: Longitude of the input coordinate
                line:
                  type: array
                  minItems: 2
                  maxItems: 2
                  items:
                    type: object
                    required: [ lat, lng ]
                    properties:
                      lat:
                        type: number
                        description: Latitude of an endpoint of the line segment
                      lng:
                        type: number
                        description: Longitude of an endpoint of the line segment
              example:
                coordinate:
                  lat: 37.618492
                  lng: 126.920078
                line:
                  - lat: 37.618515
                    lng: 126.920021
                  - lat: 37.618385
                    lng: 126.920339
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      coordinate:
                        type: object
                        properties:
                          lat:
                            type: number
                            example: 37.6184918
                            description: Latitude of the perpendicular foot
                          lng:
                            type: number
                            example: 126.9200778
                            description: Longitude of the perpendicular foot
  /coordinate/move-toward-coordinate:
    post:
      externalDocs:
        url: https://github.com/pepper-craft/geo-calculation-toolkit-api-docs/blob/main/detail/destination-coordinate-after-moving-a-certain-distance-toward-another-coordinate.md
      summary: Destination coordinate after moving a certain distance toward another coordinate
      description: |
        This is an HTTP API that calculates the coordinate reached after moving a certain distance from one point toward another point.
      tags: [ Coordinates Calculation ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ fromCoordinate, toCoordinate, distance ]
              properties:
                fromCoordinate:
                  type: object
                  required: [ lat, lng ]
                  properties:
                    lat:
                      type: number
                      description: Latitude of the starting coordinate
                    lng:
                      type: number
                      description: Longitude of the starting coordinate
                toCoordinate:
                  type: object
                  required: [ lat, lng ]
                  properties:
                    lat:
                      type: number
                      description: Latitude of the target coordinate
                    lng:
                      type: number
                      description: Longitude of the target coordinate
                distance:
                  type: number
                  description: Distance to move from the starting point
                distanceUnit:
                  type: string
                  description: |
                    Unit of distance (`mm`, `cm`, `m`, `km`, `in`, `ft`, `yd`, `mi`) (default: `m`)
              example:
                fromCoordinate:
                  lat: 37.618492
                  lng: 126.920078
                toCoordinate:
                  lat: 37.629410
                  lng: 126.933330
                distance: 2.5
                distanceUnit: m
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      coordinate:
                        type: object
                        properties:
                          lat:
                            type: number
                            example: 37.6185082
                            description: Latitude of the resulting coordinate
                          lng:
                            type: number
                            example: 126.9200977
                            description: Longitude of the resulting coordinate
  /coordinate/move-in-bearing:
    post:
      externalDocs:
        url: https://github.com/pepper-craft/geo-calculation-toolkit-api-docs/blob/main/detail/destination-coordinate-after-moving-a-certain-distance-in-a-given-bearing.md
      summary: Destination coordinate after moving a certain distance in a given bearing
      description: |
        This is an HTTP API that calculates the destination coordinate after moving a certain distance from a starting point in a specified bearing.
      tags: [ Coordinates Calculation ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ fromCoordinate, bearing, distance ]
              properties:
                fromCoordinate:
                  type: object
                  required: [ lat, lng ]
                  properties:
                    lat:
                      type: number
                      description: Latitude of the starting coordinate
                    lng:
                      type: number
                      description: Longitude of the starting coordinate
                bearing:
                  type: number
                  description: Direction of movement in degrees (0° = true north, clockwise)
                distance:
                  type: number
                  description: Distance to move from the starting point
                distanceUnit:
                  type: string
                  description: |
                    Unit of distance (`mm`, `cm`, `m`, `km`, `in`, `ft`, `yd`, `mi`) (default: `m`)
              example:
                fromCoordinate:
                  lat: 37.618492
                  lng: 126.920078
                bearing: 45
                distance: 200
                distanceUnit: m
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      coordinate:
                        type: object
                        properties:
                          lat:
                            type: number
                            example: 37.6194374
                            description: Latitude of the destination coordinate
                          lng:
                            type: number
                            example: 126.9220114
                            description: Longitude of the destination coordinate
  /containment/polygon/coordinate:
    post:
      externalDocs:
        url: https://github.com/pepper-craft/geo-calculation-toolkit-api-docs/blob/main/detail/coordinate-containment-in-a-polygonal-area.md
      summary: Coordinate containment in a polygonal area
      description: |
        This is an HTTP API that determines whether a given coordinate is contained within a polygonal area.
      tags: [ Containment Check ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ coordinate, polygon ]
              properties:
                coordinate:
                  type: object
                  required: [ lat, lng ]
                  properties:
                    lat:
                      type: number
                      description: Latitude of the coordinate
                    lng:
                      type: number
                      description: Longitude of the coordinate
                polygon:
                  type: array
                  minItems: 3
                  items:
                    type: object
                    required: [ lat, lng ]
                    properties:
                      lat:
                        type: number
                        description: Latitude of a vertex
                      lng:
                        type: number
                        description: Longitude of a vertex
              example:
                coordinate:
                  lat: 37.618492
                  lng: 126.920078
                polygon:
                  - lat: 37.618385
                    lng: 126.920021
                  - lat: 37.618500
                    lng: 126.920150
                  - lat: 37.618600
                    lng: 126.920300
                  - lat: 37.618450
                    lng: 126.920400
                  - lat: 37.618320
                    lng: 126.920250
                  - lat: 37.618385
                    lng: 126.920021
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      contained:
                        type: boolean
                        example: true
                        description: Whether the coordinate is inside the polygon area
  /containment/circle/coordinate:
    post:
      externalDocs:
        url: https://github.com/pepper-craft/geo-calculation-toolkit-api-docs/blob/main/detail/coordinate-containment-in-a-circular-area.md
      summary: Coordinate containment in a circular area
      description: |
        This is an HTTP API that determines whether a given coordinate is contained within a circular area.
      tags: [ Containment Check ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ coordinate, circle ]
              properties:
                coordinate:
                  type: object
                  required: [ lat, lng ]
                  properties:
                    lat:
                      type: number
                      description: Latitude of the coordinate
                    lng:
                      type: number
                      description: Longitude of the coordinate
                circle:
                  type: object
                  required: [ centerCoordinate, radius ]
                  properties:
                    centerCoordinate:
                      type: object
                      required: [ lat, lng ]
                      properties:
                        lat:
                          type: number
                          description: Latitude of the center point
                        lng:
                          type: number
                          description: Longitude of the center point
                    radius:
                      type: number
                      description: Radius of the circular area
                    radiusUnit:
                      type: string
                      description: Unit of radius (`mm`, `cm`, `m`, `km`, `in`, `ft`, `yd`, `mi`)
              example:
                coordinate:
                  lat: 37.618492
                  lng: 126.920078
                circle:
                  centerCoordinate:
                    lat: 37.618385
                    lng: 126.920180
                  radius: 200
                  radiusUnit: m
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      contained:
                        type: boolean
                        example: true
                        description: Whether the coordinate is inside the circular area
  /intersection/circle-pair:
    post:
      externalDocs:
        url: https://github.com/pepper-craft/geo-calculation-toolkit-api-docs/blob/main/detail/intersection-between-two-circular-areas.md
      summary: Intersection between two circular areas
      description: |
        This is an HTTP API that determines whether two circular areas intersect.
      tags: [ Intersection Check ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ circle1, circle2 ]
              properties:
                circle1:
                  type: object
                  required: [ centerCoordinate, radius ]
                  properties:
                    centerCoordinate:
                      type: object
                      required: [ lat, lng ]
                      properties:
                        lat:
                          type: number
                          description: Latitude of the first circle center
                        lng:
                          type: number
                          description: Longitude of the first circle center
                    radius:
                      type: number
                      description: Radius of the first circle
                    radiusUnit:
                      type: string
                      description: Unit of radius (`mm`, `cm`, `m`, `km`, `in`, `ft`, `yd`, `mi`)
                circle2:
                  type: object
                  required: [ centerCoordinate, radius ]
                  properties:
                    centerCoordinate:
                      type: object
                      required: [ lat, lng ]
                      properties:
                        lat:
                          type: number
                          description: Latitude of the second circle center
                        lng:
                          type: number
                          description: Longitude of the second circle center
                    radius:
                      type: number
                      description: Radius of the second circle
                    radiusUnit:
                      type: string
                      description: Unit of radius (`mm`, `cm`, `m`, `km`, `in`, `ft`, `yd`, `mi`)
              example:
                circle1:
                  centerCoordinate:
                    lat: 37.618492
                    lng: 126.920078
                  radius: 200
                  radiusUnit: m
                circle2:
                  centerCoordinate:
                    lat: 37.619410
                    lng: 126.921330
                  radius: 150
                  radiusUnit: m
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      intersected:
                        type: boolean
                        description: Whether the two circular areas intersect
                        example: true
  /intersection/polygon-pair:
    post:
      externalDocs:
        url: https://github.com/pepper-craft/geo-calculation-toolkit-api-docs/blob/main/detail/intersection-between-two-polygonal-areas.md
      summary: Intersection between two polygonal areas
      description: |
        This is an HTTP API that determines whether two polygonal areas intersect.
      tags: [ Intersection Check ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ polygon1, polygon2 ]
              properties:
                polygon1:
                  type: array
                  items:
                    type: object
                    required: [ lat, lng ]
                    properties:
                      lat:
                        type: number
                        description: Latitude of a vertex in the first polygon
                      lng:
                        type: number
                        description: Longitude of a vertex in the first polygon
                polygon2:
                  type: array
                  items:
                    type: object
                    required: [ lat, lng ]
                    properties:
                      lat:
                        type: number
                        description: Latitude of a vertex in the second polygon
                      lng:
                        type: number
                        description: Longitude of a vertex in the second polygon
              example:
                polygon1:
                  - lat: 37.618000
                    lng: 126.920000
                  - lat: 37.618000
                    lng: 126.921000
                  - lat: 37.617000
                    lng: 126.921000
                  - lat: 37.617000
                    lng: 126.920000
                polygon2:
                  - lat: 37.617500
                    lng: 126.920500
                  - lat: 37.617500
                    lng: 126.921500
                  - lat: 37.616500
                    lng: 126.921500
                  - lat: 37.616500
                    lng: 126.920500
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      intersected:
                        type: boolean
                        description: Whether the two polygonal areas intersect
                        example: true
  /intersection/polyline-pair:
    post:
      externalDocs:
        url: https://github.com/pepper-craft/geo-calculation-toolkit-api-docs/blob/main/detail/intersection-between-two-polylines.md
      summary: Intersection between two polylines
      description: |
        This is an HTTP API that determines whether two polylines intersect.
      tags: [ Intersection Check ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ polyline1, polyline2 ]
              properties:
                polyline1:
                  type: array
                  items:
                    type: object
                    required: [ lat, lng ]
                    properties:
                      lat:
                        type: number
                        description: Latitude of a point in the first polyline
                      lng:
                        type: number
                        description: Longitude of a point in the first polyline
                polyline2:
                  type: array
                  items:
                    type: object
                    required: [ lat, lng ]
                    properties:
                      lat:
                        type: number
                        description: Latitude of a point in the second polyline
                      lng:
                        type: number
                        description: Longitude of a point in the second polyline
              example:
                polyline1:
                  - lat: 37.618100
                    lng: 126.920100
                  - lat: 37.617900
                    lng: 126.920500
                  - lat: 37.617700
                    lng: 126.920900
                polyline2:
                  - lat: 37.617800
                    lng: 126.920000
                  - lat: 37.618000
                    lng: 126.920600
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      intersected:
                        type: boolean
                        description: Whether the two polylines intersect
                        example: true
  /intersection/polyline-polygon:
    post:
      externalDocs:
        url: https://github.com/pepper-craft/geo-calculation-toolkit-api-docs/blob/main/detail/intersection-between-a-polyline-and-a-polygonal-area.md
      summary: Intersection between a polyline and a polygonal area
      description: |
        This is an HTTP API that determines whether a polyline intersects with a polygonal area.
      tags: [ Intersection Check ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ polyline, polygon ]
              properties:
                polyline:
                  type: array
                  items:
                    type: object
                    required: [ lat, lng ]
                    properties:
                      lat:
                        type: number
                        description: Latitude of a point in the polyline
                      lng:
                        type: number
                        description: Longitude of a point in the polyline
                polygon:
                  type: array
                  items:
                    type: object
                    required: [ lat, lng ]
                    properties:
                      lat:
                        type: number
                        description: Latitude of a vertex in the polygon
                      lng:
                        type: number
                        description: Longitude of a vertex in the polygon
              example:
                polyline:
                  - lat: 37.618100
                    lng: 126.920100
                  - lat: 37.618300
                    lng: 126.920300
                  - lat: 37.618500
                    lng: 126.920200
                polygon:
                  - lat: 37.618200
                    lng: 126.920050
                  - lat: 37.618400
                    lng: 126.920050
                  - lat: 37.618400
                    lng: 126.920250
                  - lat: 37.618200
                    lng: 126.920250
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      intersected:
                        type: boolean
                        description: Whether the polyline intersects the polygonal area
                        example: true
  /intersection/polyline-circle:
    post:
      externalDocs:
        url: https://github.com/pepper-craft/geo-calculation-toolkit-api-docs/blob/main/detail/intersection-between-a-polyline-and-a-circular-area.md
      summary: Intersection between a polyline and a circular area
      description: |
        This is an HTTP API that determines whether a polyline intersects with a circular area.
      tags: [ Intersection Check ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ polyline, circle ]
              properties:
                polyline:
                  type: array
                  items:
                    type: object
                    required: [ lat, lng ]
                    properties:
                      lat:
                        type: number
                        description: Latitude of a point in the polyline
                      lng:
                        type: number
                        description: Longitude of a point in the polyline
                circle:
                  type: object
                  required: [ centerCoordinate, radius ]
                  properties:
                    centerCoordinate:
                      type: object
                      required: [ lat, lng ]
                      properties:
                        lat:
                          type: number
                          description: Latitude of the center point
                        lng:
                          type: number
                          description: Longitude of the center point
                    radius:
                      type: number
                      description: Radius of the circle
                    radiusUnit:
                      type: string
                      description: |
                        Unit of radius (default: "m")
                      enum: [ mm, cm, m, km, in, ft, yd, mi ]
              example:
                polyline:
                  - lat: 37.618492
                    lng: 126.920078
                  - lat: 37.619100
                    lng: 126.921500
                  - lat: 37.620300
                    lng: 126.922800
                circle:
                  centerCoordinate:
                    lat: 37.619500
                    lng: 126.921900
                  radius: 150
                  radiusUnit: m
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      intersected:
                        type: boolean
                        description: Whether the polyline intersects the circular area
                        example: true



